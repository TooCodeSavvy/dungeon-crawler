<?php
declare(strict_types=1);

namespace DungeonCrawler\Domain\Entity;

use Ramsey\Uuid\Uuid;
use Ramsey\Uuid\UuidInterface;

/**
 * Represents a collectible treasure item within the dungeon.
 *
 * A treasure has a type (e.g., gold, health potion, weapon), a value,
 * and an effect that can be applied to a player upon collection.
 * Treasures also provide descriptive metadata for display and game logic.
 */
class Treasure
{
    /**
     * The unique identifier of the treasure.
     *
     * @var UuidInterface
     */
    private UuidInterface $id;

    /**
     * Treasure constructor.
     *
     * @param TreasureType $type The type/category of the treasure.
     * @param string $name The name of the treasure (e.g., "Health Potion").
     * @param int $value Numeric value representing XP or healing.
     * @param string $description Optional description for flavor text.
     * @param UuidInterface|null $id Optional UUID; autogenerated if null.
     *
     * @throws \InvalidArgumentException If name is empty or value is non-positive.
     */
    public function __construct(
        private readonly TreasureType $type,
        private readonly string $name,
        private readonly int $value,
        private readonly string $description = '',
        ?UuidInterface $id = null
    ) {
        if (empty($name)) {
            throw new \InvalidArgumentException('Treasure name cannot be empty');
        }
        if ($value <= 0) {
            throw new \InvalidArgumentException('Treasure value must be positive');
        }

        $this->id = $id ?? Uuid::uuid4();
    }

    /**
     * Applies the treasure's effect to the player.
     *
     * @param Player $player The player who is collecting the treasure.
     * @return string A message describing the effect of the treasure.
     */
    public function applyTo(Player $player): string
    {
        return match($this->type) {
            TreasureType::GOLD => $this->applyGold($player),
            TreasureType::HEALTH_POTION => $this->applyHealthPotion($player),
            TreasureType::WEAPON => $this->applyWeapon($player),
            TreasureType::ARTIFACT => $this->applyArtifact($player),
        };
    }

    /**
     * Applies gold treasure effect: grants XP.
     */
    private function applyGold(Player $player): string
    {
        $player->gainExperience($this->value);
        return sprintf('You found %d gold coins! (+%d XP)', $this->value, $this->value);
    }

    /**
     * Applies healing potion effect: restores health.
     */
    private function applyHealthPotion(Player $player): string
    {
        $beforeHealth = $player->getHealth()->getValue();
        $player->heal($this->value);
        $afterHealth = $player->getHealth()->getValue();
        $actualHealing = $afterHealth - $beforeHealth;

        if ($actualHealing > 0) {
            return sprintf(
                'You drink the %s and restore %d health points! (Health: %d/%d)',
                $this->name,
                $actualHealing,
                $afterHealth,
                $player->getHealth()->getMax()
            );
        }

        return sprintf('You drink the %s but you\'re already at full health.', $this->name);
    }

    /**
     * Applies weapon treasure effect: grants XP.
     */
    private function applyWeapon(Player $player): string
    {
        // Placeholder effect â€” would be replaced with inventory logic
        $experienceBonus = $this->value * 2;
        $player->gainExperience($experienceBonus);

        return sprintf(
            'You found %s! While you can\'t equip it right now, the discovery grants you %d XP.',
            $this->name,
            $experienceBonus
        );
    }

    /**
     * Applies artifact effect: large XP reward.
     */
    private function applyArtifact(Player $player): string
    {
        $experienceBonus = $this->value * 5;
        $player->gainExperience($experienceBonus);

        return sprintf(
            'You discovered the legendary %s! (+%d XP)',
            $this->name,
            $experienceBonus
        );
    }

    // ---------------------------
    // Factory methods
    // ---------------------------

    /**
     * Creates a small pile of gold.
     */
    public static function createSmallGoldPile(): self
    {
        return new self(
            TreasureType::GOLD,
            'Small Gold Pile',
            value: 10,
            description: 'A handful of golden coins scattered on the ground.'
        );
    }

    /**
     * Creates a large pile of gold.
     */
    public static function createLargeGoldPile(): self
    {
        return new self(
            TreasureType::GOLD,
            'Large Gold Pile',
            value: 50,
            description: 'A substantial pile of golden coins glinting in the dim light.'
        );
    }

    /**
     * Creates a minor health potion.
     */
    public static function createMinorHealthPotion(): self
    {
        return new self(
            TreasureType::HEALTH_POTION,
            'Minor Health Potion',
            value: 25,
            description: 'A small vial filled with red liquid that glows faintly.'
        );
    }

    /**
     * Creates a standard health potion.
     */
    public static function createHealthPotion(): self
    {
        return new self(
            TreasureType::HEALTH_POTION,
            'Health Potion',
            value: 50,
            description: 'A bottle containing a vibrant red healing elixir.'
        );
    }

    /**
     * Creates a basic weapon.
     */
    public static function createRustySword(): self
    {
        return new self(
            TreasureType::WEAPON,
            'Rusty Sword',
            value: 15,
            description: 'An old sword with some rust, but still sharp enough to be valuable.'
        );
    }

    /**
     * Creates a powerful weapon.
     */
    public static function createEnchantedBlade(): self
    {
        return new self(
            TreasureType::WEAPON,
            'Enchanted Blade',
            value: 75,
            description: 'A sword that hums with magical energy, its blade gleaming with an otherworldly light.'
        );
    }

    /**
     * Creates a rare magical artifact.
     */
    public static function createAncientRelic(): self
    {
        return new self(
            TreasureType::ARTIFACT,
            'Ancient Relic',
            value: 100,
            description: 'A mysterious artifact from a forgotten age, pulsing with ancient power.'
        );
    }

    /**
     * Generates a random treasure based on rarity probabilities.
     */
    public static function createRandom(): self
    {
        $roll = rand(1, 100);

        return match(true) {
            $roll <= 30 => self::createSmallGoldPile(),      // 30%
            $roll <= 50 => self::createMinorHealthPotion(),  // 20%
            $roll <= 70 => self::createLargeGoldPile(),      // 20%
            $roll <= 85 => self::createHealthPotion(),       // 15%
            $roll <= 95 => self::createRustySword(),         // 10%
            $roll <= 99 => self::createEnchantedBlade(),     // 4%
            default => self::createAncientRelic(),           // 1%
        };
    }

    // ---------------------------
    // Accessors
    // ---------------------------

    /**
     * Returns the treasure's UUID.
     */
    public function getId(): UuidInterface
    {
        return $this->id;
    }

    /**
     * Returns the treasure's type.
     */
    public function getType(): TreasureType
    {
        return $this->type;
    }

    /**
     * Returns the treasure's name.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Returns the numeric value of the treasure.
     */
    public function getValue(): int
    {
        return $this->value;
    }

    /**
     * Returns the description or a generated fallback.
     */
    public function getDescription(): string
    {
        return $this->description ?: sprintf('A %s worth %d points.', $this->name, $this->value);
    }

    /**
     * Provides information about the treasure for UI display.
     *
     * @return array{name: string, type: string, value: int, description: string, rarity: string}
     */
    public function getDisplayInfo(): array
    {
        return [
            'name' => $this->name,
            'type' => $this->type->getDisplayName(),
            'value' => $this->value,
            'description' => $this->getDescription(),
            'rarity' => $this->getRarity(),
        ];
    }

    /**
     * Returns the rarity label based on value thresholds.
     */
    private function getRarity(): string
    {
        return match(true) {
            $this->value <= 15 => 'Common',
            $this->value <= 50 => 'Uncommon',
            $this->value <= 75 => 'Rare',
            $this->value <= 100 => 'Epic',
            default => 'Legendary',
        };
    }
}
